/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OnlineUsers.java
 *
 * Created on 17-feb-2012, 14:21:04
 */
package org.iesapp.modules.userswidget;

import com.l2fprod.common.swing.StatusBar;
import org.iesapp.framework.pluggable.TopModuleWindow;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JMenuBar;
import javax.swing.JToolBar;
import javax.swing.Timer;


/**
 *
 * @author Josep
 */
@org.openide.util.lookup.ServiceProvider(service=TopModuleWindow.class, path="modules")
public class UsersWidgetModule extends org.iesapp.framework.pluggable.TopModuleWindow {

    private int timerInterval = 60000;
    private Timer timer;
    private final OnlineUsersList ul;
    
    private boolean enabled = true;
    private String parentProgram;
    private int pid;
    
    
    /** Creates new form OnlineUsers */
    public UsersWidgetModule() {
        super();
        this.moduleName="onlineUsers";
        this.moduleDisplayName="Online Users";
        this.moduleDescription="Displays a list of users online";
        initComponents();
       
        ul = new OnlineUsersList(null, false, coreCfg);
        
    }
    
   
    @Override
    public void postInitialize() {
        //Timer must start when defining who am i
        doUpdate();
   
    }
    
    public void clear()
    {
        ul.clear();
    }
    
    public final void doUpdate()
    {
        try {
            ul.update();
        } catch (SQLException ex) {
            Logger.getLogger(UsersWidgetModule.class.getName()).log(Level.SEVERE, null, ex);
        }
          int nusua = ul.getNumUsua();
          if(nusua==1) {
            jLabel1.setText("1 usuari en línia");
        }
          else {
            jLabel1.setText(nusua+" usuaris en línia");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setOpaque(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/iesapp/modules/userswidget/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("usuarislinia")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/iesapp/framework/icons/forward.gif"))); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        doUpdate();
        if(enabled)
        {
            Point point= jLabel1.getLocationOnScreen();
            ul.setAlwaysOnTop(true);
            ul.setVisible(true);
            ul.setLocation( point.x, point.y-ul.getHeight() );
        }
      
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

//    /**
//     * @return the whoami
//     */
//    public String getWhoami() {
//        return whoami;
//    }
//
//    /**
//     * @param whoami the whoami to set
//     */
//    public void setWhoami(String whoami) {
//        this.whoami = whoami;
//        ul.setWhoami(whoami);
//        ul.checkInstantSms(this.getLocationOnScreen());
//        //Timer must start in oder to reicieve sms
//        timer.start();
//    }

    /**
     * @return the enabled
     */
    @Override
    public boolean isEnabled() {
        return enabled;
    }

    /**
     * @param enabled the enabled to set
     */
    @Override
    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
        jButton1.setEnabled(enabled);
        
        if(enabled)
        {
            timer.start();
        }
        else
        {
            timer.stop();
        }
        
    }

    public void setParentProgram(String pp) {
        this.parentProgram = pp;
    }

    /**
     * @param pid the pid to set
     */
    public void setPid(int pid) {
        this.pid = pid;
    }

    @Override
    public ImageIcon getModuleIcon() {
        return null;
    }

    @Override
    public boolean isMultipleInstance() {
        return false;
    }

    @Override
    public void refreshUI() {
        timerInterval = this.iniParameters.getInt("userswidget.refreshUsersSeconds",60)*1000;
        ul.setParameters(this.iniParameters);
        timer = new Timer(timerInterval, new ActionListener ()
        {
           
            @Override
                public void actionPerformed(ActionEvent e)
                {
                     
                    doUpdate();
                  
                    if(jLabel1.isVisible()) {
                        ul.checkInstantSms(jLabel1.getLocationOnScreen());
                    }
                    
//                    //Comprova si hi ha KILLSIGNAL
//                    CoreCfg.checkKillSignal(whoami, parentProgram, pid);
                }

         });
        
        ul.setWhoami(coreCfg.getUserInfo().getAbrev());
        timer.start();
    }

    @Override
    public void setMenus(JMenuBar jMenuBar1, JToolBar jToolbar1, StatusBar jStatusBar1) {
        //
    }
 
    
    @Override
    public void dispose() {
        
        timer.stop();
        this.dispose();
    }
 
}
